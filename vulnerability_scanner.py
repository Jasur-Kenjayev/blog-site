import os
import requests
import re
from bs4 import BeautifulSoup
from urllib.parse import urljoin


os.system("clear")
red    = "\033[31m"
blue   = "\033[34m"
bold   = "\033[1m"
reset  = "\033[0m"
green  = "\033[32m"
yellow = "\033[33m"

class Scanner:
    def __init__(self, url, ignor_link):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignor = ignor_link

    def extract_links_from(self, url):
        try:
            response = self.session.get(url)
            return re.findall(b'(?:href=")(.*?)"', response.content)
        except requests.RequestException as e:
            print(f"Error fetching {url}: {e}")
            return []

    def crawl(self, url=None):
        if url is None:
            url = self.target_url
        href_links = self.extract_links_from(url)
        for link in href_links:
            link = urljoin(url, link.decode())

            if "#" in link:
                link = link.split("#")[0]

            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignor:
                self.target_links.append(link)
                print(f"\033[31mDiscovered link: {link}")
                self.crawl(link)

    def extract_form(self, url):
        try:
            response = self.session.get(url)
            parsed_html = BeautifulSoup(response.content, 'html.parser')
            return parsed_html.find_all("form")
        except requests.RequestException as e:
            print(f"Error fetching {url}: {e}")
            return []

    def submit_form(self, form, value, url):
        action = form.get("action")
        post_url = urljoin(url, action)
        method = form.get("method")
        input_list = form.find_all("input")
        post_data = {}
        for input_tag in input_list:
            input_name = input_tag.get("name")
            input_type = input_tag.get("type")
            input_value = input_tag.get("value")
            if input_type == "text":
                input_value = value
            post_data[input_name] = input_value

        try:
            if method == "post":
                return self.session.post(post_url, data=post_data)
            return self.session.get(post_url, params=post_data)
        except requests.RequestException as e:
            print(f"Error submitting form to {post_url}: {e}")
            return None

    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_form(link)
            for form in forms:
                print(f"\n\033[33m[+] Testing form in {link}")
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                if is_vulnerable_to_xss:
                    print(f"\n\n\033[32m[***] XSS discovered in {link} in the following form:")
                    print(form)

            if "=" in link:
                print(f"\n\n\033[34m[+] Testing {link}")
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print(f"\033[32m[***] Discovered XSS in {link}")

    def test_xss_in_link(self, url):
        xss_test_script = "<sCript>alert('test')</scriPt>"
        url = url.replace("=", f"={xss_test_script}")
        try:
            response = self.session.get(url)
            return xss_test_script in response.content.decode()
        except requests.RequestException as e:
            print(f"Error testing XSS in {url}: {e}")
            return False

    def test_xss_in_form(self, form, url):
        xss_test_script = "<sCript>alert('test')</scriPt>"
        response = self.submit_form(form, xss_test_script, url)
        if response:
            return xss_test_script in response.content.decode()
        return False

def run_and_login():
    target_url = "http://127.0.0.1:8000"
    links_to_ignor = ["http://127.0.0.1:8000/users/logout/"]
    data_dict = {"username": "admin", "password": "123", "Log in": "submit"}

    vuln_scanner = Scanner(target_url, links_to_ignor)
    vuln_scanner.session.post("http://127.0.0.1:8000/users/login/", data=data_dict)

    vuln_scanner.crawl()
    vuln_scanner.run_scanner()

run_and_login()
